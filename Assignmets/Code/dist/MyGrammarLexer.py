# Generated from MyGrammar.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,178,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,3,0,72,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,
        5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,5,8,94,8,8,10,8,12,8,97,9,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,
        4,18,139,8,18,11,18,12,18,140,1,19,3,19,144,8,19,1,19,1,19,1,19,
        1,19,1,20,3,20,151,8,20,1,20,1,20,1,21,4,21,156,8,21,11,21,12,21,
        157,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,4,28,173,8,28,11,28,12,28,174,1,28,1,28,0,0,29,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,1,0,4,3,0,10,10,13,13,34,34,1,0,48,57,2,0,65,90,
        97,122,3,0,9,10,13,13,32,32,185,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,1,71,1,0,0,0,3,73,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,
        0,9,79,1,0,0,0,11,82,1,0,0,0,13,85,1,0,0,0,15,88,1,0,0,0,17,91,1,
        0,0,0,19,100,1,0,0,0,21,106,1,0,0,0,23,109,1,0,0,0,25,113,1,0,0,
        0,27,116,1,0,0,0,29,119,1,0,0,0,31,124,1,0,0,0,33,129,1,0,0,0,35,
        135,1,0,0,0,37,138,1,0,0,0,39,143,1,0,0,0,41,150,1,0,0,0,43,155,
        1,0,0,0,45,159,1,0,0,0,47,161,1,0,0,0,49,163,1,0,0,0,51,165,1,0,
        0,0,53,167,1,0,0,0,55,169,1,0,0,0,57,172,1,0,0,0,59,60,5,102,0,0,
        60,61,5,108,0,0,61,62,5,111,0,0,62,63,5,97,0,0,63,72,5,116,0,0,64,
        65,5,105,0,0,65,66,5,110,0,0,66,72,5,116,0,0,67,68,5,118,0,0,68,
        69,5,111,0,0,69,70,5,105,0,0,70,72,5,100,0,0,71,59,1,0,0,0,71,64,
        1,0,0,0,71,67,1,0,0,0,72,2,1,0,0,0,73,74,5,59,0,0,74,4,1,0,0,0,75,
        76,5,62,0,0,76,6,1,0,0,0,77,78,5,60,0,0,78,8,1,0,0,0,79,80,5,62,
        0,0,80,81,5,61,0,0,81,10,1,0,0,0,82,83,5,60,0,0,83,84,5,61,0,0,84,
        12,1,0,0,0,85,86,5,61,0,0,86,87,5,61,0,0,87,14,1,0,0,0,88,89,5,33,
        0,0,89,90,5,61,0,0,90,16,1,0,0,0,91,95,5,34,0,0,92,94,8,0,0,0,93,
        92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,
        0,97,95,1,0,0,0,98,99,5,34,0,0,99,18,1,0,0,0,100,101,5,119,0,0,101,
        102,5,104,0,0,102,103,5,105,0,0,103,104,5,108,0,0,104,105,5,101,
        0,0,105,20,1,0,0,0,106,107,5,100,0,0,107,108,5,111,0,0,108,22,1,
        0,0,0,109,110,5,97,0,0,110,111,5,110,0,0,111,112,5,100,0,0,112,24,
        1,0,0,0,113,114,5,111,0,0,114,115,5,114,0,0,115,26,1,0,0,0,116,117,
        5,105,0,0,117,118,5,102,0,0,118,28,1,0,0,0,119,120,5,116,0,0,120,
        121,5,104,0,0,121,122,5,101,0,0,122,123,5,110,0,0,123,30,1,0,0,0,
        124,125,5,101,0,0,125,126,5,108,0,0,126,127,5,115,0,0,127,128,5,
        101,0,0,128,32,1,0,0,0,129,130,5,112,0,0,130,131,5,114,0,0,131,132,
        5,105,0,0,132,133,5,110,0,0,133,134,5,116,0,0,134,34,1,0,0,0,135,
        136,5,61,0,0,136,36,1,0,0,0,137,139,7,1,0,0,138,137,1,0,0,0,139,
        140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,38,1,0,0,0,142,144,
        5,45,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,
        3,37,18,0,146,147,5,46,0,0,147,148,3,37,18,0,148,40,1,0,0,0,149,
        151,5,13,0,0,150,149,1,0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,
        153,5,10,0,0,153,42,1,0,0,0,154,156,7,2,0,0,155,154,1,0,0,0,156,
        157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,44,1,0,0,0,159,160,
        5,42,0,0,160,46,1,0,0,0,161,162,5,47,0,0,162,48,1,0,0,0,163,164,
        5,43,0,0,164,50,1,0,0,0,165,166,5,45,0,0,166,52,1,0,0,0,167,168,
        5,40,0,0,168,54,1,0,0,0,169,170,5,41,0,0,170,56,1,0,0,0,171,173,
        7,3,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,
        1,0,0,0,175,176,1,0,0,0,176,177,6,28,0,0,177,58,1,0,0,0,8,0,71,95,
        140,143,150,157,174,1,6,0,0
    ]

class MyGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TYPE = 1
    SEMICOLON = 2
    GREATER = 3
    LESS = 4
    GREATER_EQUAL = 5
    LESS_EQUAL = 6
    BOOLEAN_EQUAL = 7
    BOOLEAN_NOT_EQUAL = 8
    TEXT = 9
    WHILE = 10
    DO = 11
    AND = 12
    OR = 13
    IF = 14
    THEN = 15
    ELSE = 16
    PRINT = 17
    EQUAL = 18
    INT = 19
    FLOAT = 20
    NEWLINE = 21
    ID = 22
    MUL = 23
    DIV = 24
    PLUS = 25
    MIN = 26
    OPENPARENS = 27
    CLOSINGPARENS = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'while'", 
            "'do'", "'and'", "'or'", "'if'", "'then'", "'else'", "'print'", 
            "'='", "'*'", "'/'", "'+'", "'-'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "SEMICOLON", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", 
            "BOOLEAN_EQUAL", "BOOLEAN_NOT_EQUAL", "TEXT", "WHILE", "DO", 
            "AND", "OR", "IF", "THEN", "ELSE", "PRINT", "EQUAL", "INT", 
            "FLOAT", "NEWLINE", "ID", "MUL", "DIV", "PLUS", "MIN", "OPENPARENS", 
            "CLOSINGPARENS", "WS" ]

    ruleNames = [ "TYPE", "SEMICOLON", "GREATER", "LESS", "GREATER_EQUAL", 
                  "LESS_EQUAL", "BOOLEAN_EQUAL", "BOOLEAN_NOT_EQUAL", "TEXT", 
                  "WHILE", "DO", "AND", "OR", "IF", "THEN", "ELSE", "PRINT", 
                  "EQUAL", "INT", "FLOAT", "NEWLINE", "ID", "MUL", "DIV", 
                  "PLUS", "MIN", "OPENPARENS", "CLOSINGPARENS", "WS" ]

    grammarFileName = "MyGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


